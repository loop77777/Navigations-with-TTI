{"version":3,"sources":["App.js","index.js"],"names":["App","mapElement","useRef","useState","map","setMap","longitude","setLongitude","latitude","setLatitude","convertToPoints","lngLat","point","lat","lng","useEffect","origin","destinations","tt","key","process","container","current","stylesVisibility","trafficIncidents","trafficFlow","center","zoom","popup","Offset","bottom","setHTML","element","document","createElement","className","marker","draggable","setLngLat","addTo","on","getLngLat","setPopup","togglePopup","addMarker","recalculateRoutes","locations","callParameters","destination","origins","Promise","resolve","reject","ttapi","matrixRouting","then","matrixAPIresults","resultsArray","matrix","result","index","location","drivingtime","response","routeSummary","travelTimeInSeconds","sort","a","b","sortedLocations","sortDestinations","sorted","unshift","calculateRoute","routeData","geoJson","getLayer","removeLayer","removeSource","addLayer","id","type","source","data","paint","drawRoute","toGeoJson","e","push","addDeliveryMarker","remove","ref","placeholder","onChange","target","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b6a1b5e.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport * as tt from \"@tomtom-international/web-sdk-maps\";\nimport * as ttapi from \"@tomtom-international/web-sdk-services\";\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport \"./App.css\";\n\nconst App = () => {\n  const mapElement = useRef();\n  const [map, setMap] = useState({});\n  const [longitude, setLongitude] = useState(75.784912);\n  const [latitude, setLatitude] = useState(23.1793);\n\n  const convertToPoints = (lngLat) => {\n    return {\n      point: {\n        latitude: lngLat.lat,\n        longitude: lngLat.lng,\n      },\n    };\n  };\n\n  const drawRoute = (geoJson, map) => {\n    if (map.getLayer(\"route\")) {\n      map.removeLayer(\"route\");\n      map.removeSource(\"route\");\n    }\n    map.addLayer({\n      id: \"route\",\n      type: \"line\",\n      source: {\n        type: \"geojson\",\n        data: geoJson,\n      },\n      paint: {\n        \"line-color\": \"red\",\n        \"line-width\": 5,\n      },\n    });\n  };\n\n  const addDeliveryMarker = (lngLat, map) => {\n    const element = document.createElement(\"div\");\n    element.className = \"marker-delivery\";\n    new tt.Marker({\n      element: element,\n    })\n      .setLngLat(lngLat)\n      .addTo(map);\n  };\n\n  useEffect(() => {\n    const origin = {\n      lng: longitude,\n      lat: latitude,\n    };\n\n    const destinations = [];\n\n    let map = tt.map({\n      key: process.env.REACT_APP_NAVIGATIONS_API_KEY,\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n      center: [longitude, latitude],\n      zoom: 14,\n    });\n\n    setMap(map);\n\n    const addMarker = () => {\n      const popupOffset = {\n        bottom: [0, -25],\n      };\n\n      const popup = new tt.Popup({ Offset: popupOffset }).setHTML(\n        \"This is you!\"\n      );\n\n      const element = document.createElement(\"div\");\n      element.className = \"marker\";\n\n      const marker = new tt.Marker({\n        draggable: true,\n        element: element,\n      })\n        .setLngLat([longitude, latitude])\n        .addTo(map);\n\n      marker.on(\"dragend\", () => {\n        const lngLat = marker.getLngLat();\n        setLongitude(lngLat.lng);\n        setLatitude(lngLat.lat);\n      });\n      marker.setPopup(popup).togglePopup();\n    };\n\n    addMarker();\n\n    const sortDestinations = (locations) => {\n      const pointsForDestinations = locations.map((destination) => {\n        return convertToPoints(destination);\n      });\n      const callParameters = {\n        key: process.env.REACT_APP_NAVIGATIONS_API_KEY,\n        destinations: pointsForDestinations,\n        origins: [convertToPoints(origin)],\n      };\n      return new Promise((resolve, reject) => {\n        ttapi.services\n          .matrixRouting(callParameters)\n          .then((matrixAPIresults) => {\n            const results = matrixAPIresults.matrix[0];\n            const resultsArray = results.map((result, index) => {\n              return {\n                location: locations[index],\n                drivingtime: result.response.routeSummary.travelTimeInSeconds,\n              };\n            });\n            resultsArray.sort((a, b) => {\n              return a.drivingtime - b.drivingtime;\n            });\n            const sortedLocations = resultsArray.map((result) => {\n              return result.location;\n            });\n            resolve(sortedLocations);\n          });\n      });\n    };\n    const recalculateRoutes = () => {\n      sortDestinations(destinations).then((sorted) => {\n        sorted.unshift(origin);\n        ttapi.services\n          .calculateRoute({\n            key: process.env.REACT_APP_NAVIGATIONS_API_KEY,\n            locations: sorted,\n          })\n          .then((routeData) => {\n            const geoJson = routeData.toGeoJson();\n            drawRoute(geoJson, map);\n          });\n      });\n    };\n\n    map.on(\"click\", (e) => {\n      destinations.push(e.lngLat);\n      addDeliveryMarker(e.lngLat, map);\n      recalculateRoutes();\n    });\n\n    return () => map.remove();\n  }, [longitude, latitude]);\n\n  return (\n    <>\n      {map && (\n        <div className=\"app\">\n          <div ref={mapElement} className=\"map\" />\n          <div className=\"search-bar\">\n            <h1>Where to?</h1>\n            <input\n              type=\"text\"\n              id=\"longitude\"\n              className=\"longitude\"\n              placeholder=\"Put in Longitude\"\n              onChange={(e) => {\n                setLongitude(e.target.value);\n              }}\n            />\n            <input\n              type=\"text\"\n              id=\"latitude\"\n              className=\"latitude\"\n              placeholder=\"Put in Latitude\"\n              onChange={(e) => {\n                setLatitude(e.target.value);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}